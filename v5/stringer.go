// Code generated by "stringer -output stringer.go -linecomment -type=tokCh,Kind,Linkage,StorageDuration,BinaryOperation,AssignmentOperation"; DO NOT EDIT.

package cc

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ADDASSIGN-57345]
	_ = x[ALIGNAS-57346]
	_ = x[ALIGNOF-57347]
	_ = x[ANDAND-57348]
	_ = x[ANDASSIGN-57349]
	_ = x[ARROW-57350]
	_ = x[ASM-57351]
	_ = x[ATOMIC-57352]
	_ = x[ATTRIBUTE-57353]
	_ = x[AUTO-57354]
	_ = x[AUTOTYPE-57355]
	_ = x[BOOL-57356]
	_ = x[BREAK-57357]
	_ = x[CASE-57358]
	_ = x[CHAR-57359]
	_ = x[CHARCONST-57360]
	_ = x[COMPLEX-57361]
	_ = x[CONST-57362]
	_ = x[CONTINUE-57363]
	_ = x[DDD-57364]
	_ = x[DEC-57365]
	_ = x[DECIMAL128-57366]
	_ = x[DECIMAL32-57367]
	_ = x[DECIMAL64-57368]
	_ = x[DECLSPEC-57369]
	_ = x[DEFAULT-57370]
	_ = x[DIVASSIGN-57371]
	_ = x[DO-57372]
	_ = x[DOUBLE-57373]
	_ = x[ELSE-57374]
	_ = x[ENUM-57375]
	_ = x[EQ-57376]
	_ = x[EXTERN-57377]
	_ = x[FLOAT-57378]
	_ = x[FLOAT128-57379]
	_ = x[FLOAT128X-57380]
	_ = x[FLOAT16-57381]
	_ = x[FLOAT32-57382]
	_ = x[FLOAT32X-57383]
	_ = x[FLOAT64-57384]
	_ = x[FLOAT64X-57385]
	_ = x[FLOATCONST-57386]
	_ = x[FOR-57387]
	_ = x[GENERIC-57388]
	_ = x[GEQ-57389]
	_ = x[GOTO-57390]
	_ = x[HEADER_NAME-57391]
	_ = x[IDENTIFIER-57392]
	_ = x[IF-57393]
	_ = x[IMAG-57394]
	_ = x[IMAGINARY-57395]
	_ = x[INC-57396]
	_ = x[INLINE-57397]
	_ = x[INT-57398]
	_ = x[INT8-57399]
	_ = x[INT16-57400]
	_ = x[INT32-57401]
	_ = x[INT64-57402]
	_ = x[INT128-57403]
	_ = x[INTCONST-57404]
	_ = x[LABEL-57405]
	_ = x[LEQ-57406]
	_ = x[LONG-57407]
	_ = x[LONGCHARCONST-57408]
	_ = x[LONGSTRINGLITERAL-57409]
	_ = x[LSH-57410]
	_ = x[LSHASSIGN-57411]
	_ = x[MODASSIGN-57412]
	_ = x[MULASSIGN-57413]
	_ = x[NEQ-57414]
	_ = x[NONNULL-57415]
	_ = x[NORETURN-57416]
	_ = x[ORASSIGN-57417]
	_ = x[OROR-57418]
	_ = x[PPNUMBER-57419]
	_ = x[PPPASTE-57420]
	_ = x[REAL-57421]
	_ = x[REGISTER-57422]
	_ = x[RESTRICT-57423]
	_ = x[RETURN-57424]
	_ = x[RSH-57425]
	_ = x[RSHASSIGN-57426]
	_ = x[SHORT-57427]
	_ = x[SIGNED-57428]
	_ = x[SIZEOF-57429]
	_ = x[STATIC-57430]
	_ = x[STATICASSERT-57431]
	_ = x[STRINGLITERAL-57432]
	_ = x[STRUCT-57433]
	_ = x[SUBASSIGN-57434]
	_ = x[SWITCH-57435]
	_ = x[THREADLOCAL-57436]
	_ = x[TYPEDEF-57437]
	_ = x[TYPENAME-57438]
	_ = x[TYPEOF-57439]
	_ = x[UINT8-57440]
	_ = x[UINT16-57441]
	_ = x[UINT32-57442]
	_ = x[UINT64-57443]
	_ = x[UINT128-57444]
	_ = x[UNION-57445]
	_ = x[UNSIGNED-57446]
	_ = x[VOID-57447]
	_ = x[VOLATILE-57448]
	_ = x[WHILE-57449]
	_ = x[XORASSIGN-57450]
}

const _tokCh_name = "'+=''_Alignas''_Alignof''&&''&=''->''__asm__''_Atomic''__attribute__''auto''__auto_type''_Bool''break''case''char'character constant'_Complex''const''continue''...''--''_Decimal128''_Decimal32''_Decimal64''__declspec''default''/=''do''double''else''enum''==''extern''float''_Float128''_Float128x''_Float16''_Float32''_Float32x''_Float64''_Float64x'floating point constant'for''_Generic''>=''goto'<header-name>identifier'if''__imag__''_Imaginary''++''inline''int''__int8''__int16''__int32''__int64''__int128'integer constant'__label__''<=''long'long character constantlong string literal'<<''<<=''%=''*=''!=''_Nonnull''_Noreturn''|=''||'preprocessing number'##''__real__''register''restrict''return''>>''>>=''short''signed''sizeof''static'_Static_assertstring literal'struct''-=''switch''_Thread_local''typedef'type name'typeof''__uint8_t''__uint16_t''__uint32_t''__uint64_t''__uint128_t''union''unsigned''void''volatile''while''^='"

var _tokCh_index = [...]uint16{0, 4, 14, 24, 28, 32, 36, 45, 54, 69, 75, 88, 95, 102, 108, 114, 132, 142, 149, 159, 164, 168, 181, 193, 205, 217, 226, 230, 234, 242, 248, 254, 258, 266, 273, 284, 296, 306, 316, 327, 337, 348, 371, 376, 386, 390, 396, 409, 419, 423, 433, 445, 449, 457, 462, 470, 479, 488, 497, 507, 523, 534, 538, 544, 567, 586, 590, 595, 599, 603, 607, 617, 628, 632, 636, 656, 660, 670, 680, 690, 698, 702, 707, 714, 722, 730, 738, 752, 766, 774, 778, 786, 801, 810, 819, 827, 838, 850, 862, 874, 887, 894, 904, 910, 920, 927, 931}

func (i tokCh) String() string {
	i -= 57345
	if i < 0 || i >= tokCh(len(_tokCh_index)-1) {
		return "tokCh(" + strconv.FormatInt(int64(i+57345), 10) + ")"
	}
	return _tokCh_name[_tokCh_index[i]:_tokCh_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InvalidKind-0]
	_ = x[Array-1]
	_ = x[Bool-2]
	_ = x[Char-3]
	_ = x[ComplexChar-4]
	_ = x[ComplexDouble-5]
	_ = x[ComplexFloat-6]
	_ = x[ComplexInt-7]
	_ = x[ComplexLong-8]
	_ = x[ComplexLongDouble-9]
	_ = x[ComplexLongLong-10]
	_ = x[ComplexShort-11]
	_ = x[ComplexUInt-12]
	_ = x[ComplexUShort-13]
	_ = x[Decimal128-14]
	_ = x[Decimal32-15]
	_ = x[Decimal64-16]
	_ = x[Double-17]
	_ = x[Enum-18]
	_ = x[Float-19]
	_ = x[Float128-20]
	_ = x[Float128x-21]
	_ = x[Float16-22]
	_ = x[Float32-23]
	_ = x[Float32x-24]
	_ = x[Float64-25]
	_ = x[Float64x-26]
	_ = x[Function-27]
	_ = x[Int-28]
	_ = x[Int8-29]
	_ = x[Int16-30]
	_ = x[Int32-31]
	_ = x[Int64-32]
	_ = x[Int128-33]
	_ = x[Long-34]
	_ = x[LongDouble-35]
	_ = x[LongLong-36]
	_ = x[Ptr-37]
	_ = x[SChar-38]
	_ = x[Short-39]
	_ = x[Struct-40]
	_ = x[UChar-41]
	_ = x[UInt-42]
	_ = x[UInt8-43]
	_ = x[UInt16-44]
	_ = x[UInt32-45]
	_ = x[UInt64-46]
	_ = x[UInt128-47]
	_ = x[ULong-48]
	_ = x[ULongLong-49]
	_ = x[UShort-50]
	_ = x[Union-51]
	_ = x[Void-52]
	_ = x[maxKind-53]
}

const _Kind_name = "InvalidKindarray_Boolchar_Complex char_Complex double_Complex float_Complex int_Complex long_Complex long double_Complex long long_Complex short_Complex unsigned_Complex unsigned short_Decimal128_Decimal32_Decimal64doubleenumfloat_Float128_Float128x_Float16_Float32_Float32x_Float64_Float64xfunctionint__int8__int16__int32__int64__int128longlong doublelong longpointersigned charshortstructunsigned charunsignedunsigned __int8unsigned __int16unsigned __int32unsigned __int64unsigned __int128unsigned longunsigned long longunsigned shortunionvoidmaxKind"

var _Kind_index = [...]uint16{0, 11, 16, 21, 25, 38, 53, 67, 79, 92, 112, 130, 144, 161, 184, 195, 205, 215, 221, 225, 230, 239, 249, 257, 265, 274, 282, 291, 299, 302, 308, 315, 322, 329, 337, 341, 352, 361, 368, 379, 384, 390, 403, 411, 426, 442, 458, 474, 491, 504, 522, 536, 541, 545, 552}

func (i Kind) String() string {
	if i < 0 || i >= Kind(len(_Kind_index)-1) {
		return "Kind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Kind_name[_Kind_index[i]:_Kind_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[External-0]
	_ = x[Internal-1]
	_ = x[None-2]
}

const _Linkage_name = "ExternalInternalNone"

var _Linkage_index = [...]uint8{0, 8, 16, 20}

func (i Linkage) String() string {
	if i < 0 || i >= Linkage(len(_Linkage_index)-1) {
		return "Linkage(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Linkage_name[_Linkage_index[i]:_Linkage_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Static-0]
	_ = x[Automatic-1]
	_ = x[Allocated-2]
}

const _StorageDuration_name = "StaticAutomaticAllocated"

var _StorageDuration_index = [...]uint8{0, 6, 15, 24}

func (i StorageDuration) String() string {
	if i < 0 || i >= StorageDuration(len(_StorageDuration_index)-1) {
		return "StorageDuration(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _StorageDuration_name[_StorageDuration_index[i]:_StorageDuration_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BinaryOperationAdd-1]
	_ = x[BinaryOperationSub-2]
	_ = x[BinaryOperationMul-3]
	_ = x[BinaryOperationDiv-4]
	_ = x[BinaryOperationMod-5]
	_ = x[BinaryOperationOr-6]
	_ = x[BinaryOperationAnd-7]
	_ = x[BinaryOperationXor-8]
	_ = x[BinaryOperationLsh-9]
	_ = x[BinaryOperationRsh-10]
	_ = x[BinaryOperationEq-11]
	_ = x[BinaryOperationNeq-12]
	_ = x[BinaryOperationLt-13]
	_ = x[BinaryOperationGt-14]
	_ = x[BinaryOperationLeq-15]
	_ = x[BinaryOperationGeq-16]
	_ = x[BinaryOperationLOr-17]
	_ = x[BinaryOperationLAnd-18]
}

const _BinaryOperation_name = "BinaryOperationAddBinaryOperationSubBinaryOperationMulBinaryOperationDivBinaryOperationModBinaryOperationOrBinaryOperationAndBinaryOperationXorBinaryOperationLshBinaryOperationRshBinaryOperationEqBinaryOperationNeqBinaryOperationLtBinaryOperationGtBinaryOperationLeqBinaryOperationGeqBinaryOperationLOrBinaryOperationLAnd"

var _BinaryOperation_index = [...]uint16{0, 18, 36, 54, 72, 90, 107, 125, 143, 161, 179, 196, 214, 231, 248, 266, 284, 302, 321}

func (i BinaryOperation) String() string {
	i -= 1
	if i < 0 || i >= BinaryOperation(len(_BinaryOperation_index)-1) {
		return "BinaryOperation(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _BinaryOperation_name[_BinaryOperation_index[i]:_BinaryOperation_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AssignmentOperationAssign-0]
	_ = x[AssignmentOperationMul-1]
	_ = x[AssignmentOperationDiv-2]
	_ = x[AssignmentOperationMod-3]
	_ = x[AssignmentOperationAdd-4]
	_ = x[AssignmentOperationSub-5]
	_ = x[AssignmentOperationLsh-6]
	_ = x[AssignmentOperationRsh-7]
	_ = x[AssignmentOperationAnd-8]
	_ = x[AssignmentOperationXor-9]
	_ = x[AssignmentOperationOr-10]
}

const _AssignmentOperation_name = "AssignmentOperationAssignAssignmentOperationMulAssignmentOperationDivAssignmentOperationModAssignmentOperationAddAssignmentOperationSubAssignmentOperationLshAssignmentOperationRshAssignmentOperationAndAssignmentOperationXorAssignmentOperationOr"

var _AssignmentOperation_index = [...]uint8{0, 25, 47, 69, 91, 113, 135, 157, 179, 201, 223, 244}

func (i AssignmentOperation) String() string {
	if i < 0 || i >= AssignmentOperation(len(_AssignmentOperation_index)-1) {
		return "AssignmentOperation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AssignmentOperation_name[_AssignmentOperation_index[i]:_AssignmentOperation_index[i+1]]
}
