// Copyright 2022 The CC Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package cc // import "modernc.org/cc/v4"

import (
	"fmt"

	"encoding/binary"
)

var (
	byteOrders = map[string]binary.ByteOrder{
		"amd64": binary.LittleEndian,
		"386":   binary.LittleEndian,
		"arm":   binary.LittleEndian,
		"arm64": binary.LittleEndian,
		"s390x": binary.BigEndian,
	}

	signedChars = map[[2]string]bool{
		{"linux", "arm"}:   false,
		{"linux", "arm64"}: false,
		{"linux", "s390x"}: false,

		{"darwin", "amd64"}:  true,
		{"darwin", "arm64"}:  true,
		{"freebsd", "386"}:   true,
		{"freebsd", "amd64"}: true,
		{"linux", "386"}:     true,
		{"linux", "amd64"}:   true,
		{"netbsd", "amd64"}:  true,
		{"openbsd", "amd64"}: true,
		{"windows", "386"}:   true,
		{"windows", "amd64"}: true,
	}

	abiTypes = map[[2]string]map[Kind]abiType{
		// Linux, generated by GCC 8.3.0
		{"linux", "amd64"}: {
			Ptr:        {8, 8, 8},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {8, 8, 8},
			ULong:      {8, 8, 8},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {16, 16, 16},
			Int128:     {16, 16, 16},
			UInt128:    {16, 16, 16},
			Float32:    {4, 4, 4},
			Float32x:   {8, 8, 8},
			Float64:    {8, 8, 8},
			Float64x:   {16, 16, 16},
			Float128:   {16, 16, 16},
		},
		{"linux", "386"}: {
			Ptr:        {4, 4, 4},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {4, 4, 4},
			ULong:      {4, 4, 4},
			LongLong:   {8, 4, 4},
			ULongLong:  {8, 4, 4},
			Float:      {4, 4, 4},
			Double:     {8, 4, 4},
			LongDouble: {12, 4, 4},
			Float32:    {4, 4, 4},
			Float32x:   {8, 4, 4},
			Float64:    {8, 4, 4},
			Float64x:   {12, 4, 4},
			Float128:   {16, 16, 16},
		},
		{"linux", "arm"}: {
			Ptr:        {4, 4, 4},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {4, 4, 4},
			ULong:      {4, 4, 4},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {8, 8, 8},
		},
		{"linux", "arm64"}: {
			Ptr:        {8, 8, 8},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {8, 8, 8},
			ULong:      {8, 8, 8},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {16, 16, 16},
			Int128:     {16, 16, 16},
			UInt128:    {16, 16, 16},
		},
		// $ x86_64-w64-mingw32-gcc main.c && wine a.exe
		{"windows", "amd64"}: {
			Ptr:        {8, 8, 8},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {4, 4, 4},
			ULong:      {4, 4, 4},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {16, 16, 16},
			Int128:     {16, 16, 16},
			UInt128:    {16, 16, 16},
			Float32:    {4, 4, 4},
			Float32x:   {8, 8, 8},
			Float64:    {8, 8, 8},
			Float64x:   {16, 16, 16},
			Float128:   {16, 16, 16},
		},
		// $ i686-w64-mingw32-gcc main.c && wine a.exe
		{"windows", "386"}: {
			Ptr:        {4, 4, 4},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {4, 4, 4},
			ULong:      {4, 4, 4},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {12, 4, 4},
			Float32:    {4, 4, 4},
			Float32x:   {8, 8, 8},
			Float64:    {8, 8, 8},
			Float64x:   {12, 4, 4},
			Float128:   {16, 16, 16},
		},
		{"darwin", "amd64"}: {
			Ptr:        {8, 8, 8},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {8, 8, 8},
			ULong:      {8, 8, 8},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {16, 16, 16},
			Int128:     {16, 16, 16},
			UInt128:    {16, 16, 16},
		},
		{"darwin", "arm64"}: {
			Ptr:        {8, 8, 8},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {8, 8, 8},
			ULong:      {8, 8, 8},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {8, 8, 8},
			Int128:     {16, 16, 16},
			UInt128:    {16, 16, 16},
		},
		// gcc (SUSE Linux) 7.5.0
		{"linux", "s390x"}: {
			Ptr:        {8, 8, 8},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {8, 8, 8},
			ULong:      {8, 8, 8},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {16, 8, 8},
			Int128:     {16, 8, 8},
			UInt128:    {16, 8, 8},
			Float32:    {4, 4, 4},
			Float32x:   {8, 8, 8},
			Float64:    {8, 8, 8},
			Float64x:   {16, 8, 8},
			Float128:   {16, 8, 8},
		},
		// gcc (FreeBSD Ports Collection) 10.3.0
		{"freebsd", "amd64"}: {
			Ptr:        {8, 8, 8},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {8, 8, 8},
			ULong:      {8, 8, 8},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {16, 16, 16},
			Int128:     {16, 16, 16},
			UInt128:    {16, 16, 16},
		},
		// gcc (FreeBSD Ports Collection) 10.3.0
		{"freebsd", "386"}: {
			Ptr:        {4, 4, 4},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {4, 4, 4},
			ULong:      {4, 4, 4},
			LongLong:   {8, 4, 4},
			ULongLong:  {8, 4, 4},
			Float:      {4, 4, 4},
			Double:     {8, 4, 4},
			LongDouble: {12, 4, 4},
			Float32:    {4, 4, 4},
			Float32x:   {8, 4, 4},
			Float64:    {8, 4, 4},
			Float64x:   {16, 16, 16},
			Float128:   {16, 16, 16},
		},
		// gcc (GCC) 8.4.0
		{"openbsd", "amd64"}: {
			Ptr:        {8, 8, 8},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {8, 8, 8},
			ULong:      {8, 8, 8},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {16, 16, 16},
			Int128:     {16, 16, 16},
			UInt128:    {16, 16, 16},
			Float32:    {4, 4, 4},
			Float32x:   {8, 8, 8},
			Float64:    {8, 8, 8},
			Float64x:   {16, 16, 16},
			Float128:   {16, 16, 16},
		},
		// gcc (GCC) 10.3.0
		{"netbsd", "amd64"}: {
			Ptr:        {8, 8, 8},
			Void:       {1, 1, 1},
			Bool:       {1, 1, 1},
			Char:       {1, 1, 1},
			SChar:      {1, 1, 1},
			UChar:      {1, 1, 1},
			Short:      {2, 2, 2},
			UShort:     {2, 2, 2},
			Enum:       {4, 4, 4},
			Int:        {4, 4, 4},
			UInt:       {4, 4, 4},
			Long:       {8, 8, 8},
			ULong:      {8, 8, 8},
			LongLong:   {8, 8, 8},
			ULongLong:  {8, 8, 8},
			Float:      {4, 4, 4},
			Double:     {8, 8, 8},
			LongDouble: {16, 16, 16},
			Int128:     {16, 16, 16},
			UInt128:    {16, 16, 16},
		},
	}
)

// ABI describes selected parts of the Application Binary Interface.
type ABI struct {
	byteOrder binary.ByteOrder
	types     map[Kind]abiType

	signedChar bool
}

type abiType struct {
	size       int64
	align      int
	fieldAlign int
}

func newABI(os, arch string) (*ABI, error) {
	byteOrder, ok := byteOrders[arch]
	if !ok {
		return nil, fmt.Errorf("unsupported arch: %s", arch)
	}

	types0, ok := abiTypes[[2]string{os, arch}]
	if !ok {
		return nil, fmt.Errorf("unsupported os/arch: %s/%s", os, arch)
	}

	types := make(map[Kind]abiType)
	for k, v := range types0 {
		types[k] = v
	}
	for ck := Invalid; ck < maxKind; ck++ {
		rk := correspondingRealKinds[ck]
		if rk == Invalid {
			continue
		}

		rt := types[rk]
		ct := abiType{
			size:       2 * rt.size,
			align:      rt.align,
			fieldAlign: rt.fieldAlign,
		}
		types[ck] = ct
	}
	return &ABI{
		byteOrder:  byteOrder,
		types:      types,
		signedChar: signedChars[[2]string{os, arch}],
	}, nil
}

func (a *ABI) isSignedInteger(k Kind) bool {
	switch k {
	case Bool, UChar, UInt, ULong, ULongLong, UShort, UInt128:
		return false
	case SChar, Int, Long, LongLong, Short, Int128:
		return true
	case Char:
		return a.signedChar
	default:
		panic(todo("", k))
	}
}
